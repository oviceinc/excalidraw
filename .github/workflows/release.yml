name: Release

on:
  push:
    branches:
      - master

permissions:
  contents: write
  packages: write
  pull-requests: write

concurrency: ${{ github.workflow }}-${{ github.ref }}
jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js 18.x
        uses: actions/setup-node@v2
        with:
          node-version: 18.x
          registry-url: "https://npm.pkg.github.com"
          scope: oviceinc
      - run: corepack enable
      - name: Install dependencies
        run: yarn install
      - name: Creating .npmrc
        run: |
          cat << EOF > "$HOME/.npmrc"
            //npm.pkg.github.com/:_authToken=$GITHUB_TOKEN
          EOF
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release Pull Request or Publish to npm
        id: changesets
        uses: changesets/action@v1
        with:
          # This expects you to have a script called release which does a build for your packages and calls changeset publish
          publish: yarn run release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload packages to GitHub Release
        if: steps.changesets.outputs.published == 'true'
        run: |
          echo "Packages published successfully."

          # Parse published packages JSON
          published_packages='${{ steps.changesets.outputs.publishedPackages }}'
          echo "Published packages: $published_packages"

          # Function to process package release
          process_package_release() {
            local package_name="$1"
            local package_dir="$2"
            
            if echo "$published_packages" | jq -r '.[].name' | grep -q "$package_name"; then
              echo "Found $package_name in published packages"
              
              # Get the version
              version=$(echo "$published_packages" | jq -r ".[] | select(.name == \"$package_name\") | .version")
              tag_name="$package_name@$version"
              
              echo "Creating GitHub Release for tag: $tag_name"
              
              # Upload tgz files
              for file in "$package_dir"/*.tgz; do
                if [ -f "$file" ]; then
                  echo "Uploading $file to release $tag_name"
                  gh release upload "$tag_name" "$file" --clobber
                fi
              done
              
              return 0
            fi
            return 1
          }

          # Process packages
          found_packages=0

          if process_package_release "@oviceinc/y-excalidraw" "packages/y-excalidraw"; then
            ((found_packages++))
          fi

          if process_package_release "@oviceinc/excalidraw" "packages/excalidraw"; then
            ((found_packages++))
          fi

          # Log if no packages were found
          if [ $found_packages -eq 0 ]; then
            echo "Neither @oviceinc/y-excalidraw nor @oviceinc/excalidraw found in published packages"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
